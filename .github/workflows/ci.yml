name: CI

on:
  # allows us to run workflows manually
  workflow_dispatch:

  pull_request:
    branches:
      - develop
      - master
  push:
    branches:
      - develop
      - master

env:
  MPI_DIR: /usr
  HDF5_ROOT: /usr
  OMP_NUM_THREADS: 2
  COVERALLS_PARALLEL: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


jobs:
  main:
    runs-on: ubuntu-16.04
    strategy:
      matrix:
        python-version: [3.8]
        mpi: [mpi-n, mpi-y]
        omp: [omp-n, omp-y]
        dagmc: [dagmc-n]
        event: [event-n]
        vectfit: [vectfit-n]

        include:
        # Python 3.6
          - python-version: 3.6
            mpi: mpi-n
            omp: omp-n
            dagmc: dagmc-n
            event: event-n
            vectfit: vectfit-n
          # Python 3.7
          - python-version: 3.7
            mpi: mpi-n
            omp: omp-n
            dagmc: dagmc-n
            event: event-n
            vectfit: vectfit-n
          # DAGMC
          - python-version: 3.8
            mpi: mpi-y
            omp: omp-y
            dagmc: dagmc-y
            event: event-n
            vectfit: vectfit-n
          # Event-based mode
          - python-version: 3.8
            omp: omp-y
            mpi: mpi-n
            dagmc: dagmc-y
            event: event-n
            vectfit: vectfit-n
          # Vectfit
          - python-version: 3.8
            omp: omp-y
            mpi: mpi-y
            dagmc: dagmc-n
            event: event-n
            vectfit: vectfit-y

    env:
      MPI: ${{ matrix.mpi }}
      PHDF5: ${{ matrix.mpi }}
      OMP: ${{ matrix.omp }}
      DAGMC: ${{ matrix.dagmc }}
      EVENT: ${{ matrix.event }}
      VECTFIT: ${{ matrix.vectfit }}

    steps:
      -
        name: Repo checkout
        uses: actions/checkout@v2
      -
        name: Aptitude dependencies
        shell: bash
        run: |
          sudo apt -y update
          sudo apt install -y mpich \
                              libmpich-dev \
                              libhdf5-serial-dev \
                              libhdf5-mpich-dev \
                              libeigen3-dev
      -
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        # Upgrade pip, pytest, numpy before doing anything else
      -
        name: Python updates
        run: |
          pip install --upgrade pip
          pip install --upgrade pytest
          pip install --upgrade numpy
      -
        name: Cache cross-section data
        id: xs-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/nndc_hdf5
            ~/endf-b-vii.1
          key: cross-section-cache
      -
        name: Download cross-sections
        shell: bash
        if: steps.xs-cache.outputs.cache-hit != 'true'
        run: $GITHUB_WORKSPACE/tools/ci/gha-before-script.sh
      -
        name: Environment Variables
        run: |
          echo "DAGMC_ROOT=$HOME/DAGMC"
          echo "OPENMC_CROSS_SECTIONS=$HOME/nndc_hdf5/cross_sections.xml" >> $GITHUB_ENV
          echo "OPENMC_ENDF_DATA=$HOME/endf-b-vii.1" >> $GITHUB_ENV
          echo "$HOME/NJOY2016/build" >> $GITHUB_PATH
      - name: Cache NJOY
        id: njoy-cache
        uses: actions/cache@v2
        with:
          path: ~/NJOY2016
          key: njoy-cache
      -
        name: Build NJOY
        shell: bash
        if: steps.njoy-cache.outputs.cache-hit != 'true'
        run: |
          $GITHUB_WORKSPACE/tools/ci/gha-install-njoy.sh
      - name: Build DAGMC
        if: ${{ matrix.dagmc == 'y' }}
        run: $GITHUB_WORKSPACE/tools/ci/gha-install-dagmc.sh
      - name: Cache DAGMC
        uses: actions/cache@v2
        with:
          path: ~/DAGMC
          key: dagmc-cache
      -
        name: Install vectfit
        if: ${{ matrix.vectfit == 'y' }}
        run: $GITHUB_WORKSPACE/tools/ci/gha-install-vectfit.sh
      -
        name: Install OpenMC
        shell: bash
        run: |
          $GITHUB_WORKSPACE/tools/ci/gha-install.sh
      -
        name: test
        shell: bash
        run: $GITHUB_WORKSPACE/tools/ci/gha-script.sh
      -
        name: after_success
        shell: bash
        run: |
          cpp-coveralls -i src -i include --exclude-pattern "/usr/*" --dump cpp_cov.json
          coveralls --merge=cpp_cov.json

  finish:
    needs: main
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true